from math import sqrt
from math import factorial

def combination (n , k):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))

# 1. Даны значения зарплат из выборки выпускников: 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150.
# Посчитать (желательно без использования статистических методов наподобие std, var, mean) среднее арифметическое,
# среднее квадратичное отклонение, смещенную и несмещенную оценки дисперсий для данной выборки.

list = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]

# среднее арифметическое
list_sum = 0

for i in list:
    list_sum += i

list_mean = list_sum / len(list)
print(f'Среднее арифметическое: {list_mean}')

# смещенная оценка дисперсии
list_smesh_len = len(list)    # для получения смещённой дисперсии в качестве кол-ва элементов берём длинну списка
temp_sum = 0

for i in list:
    temp_sum += (i - list_mean) ** 2

smesh_sigma2 = temp_sum / list_smesh_len
print(f'Смещённая оценка дисперсии: {smesh_sigma2}')

# несмещенная оценка дисперсии
list_nesmesh_len = len(list) - 1    # то для получения несмещённой дисперсии отнимаем от кол-ва элементов 1
nesmesh_sigma2 = temp_sum / list_nesmesh_len
print(f'Несмещённая оценка дисперсии: {nesmesh_sigma2}')

# среднее квадратичное отклонение
list_std = sqrt(smesh_sigma2)
print(f'Среднее квадратичное отклонение: {list_std}')

# В первом ящике находится 8 мячей, из которых 5 - белые. Во втором ящике - 12 мячей, из которых 5 белых.
# Из первого ящика вытаскивают случайным образом два мяча, из второго - 4.
# Какова вероятность того, что 3 мяча белые?

# из первого ящика из 3 чёрных вытянуть 2, из второго ящика из 5 белых вытащить 3 и из 7 чёрных вытащить 1
p1 = (combination(3, 2) / combination(8, 2)) * ((combination(5, 3) * combination(7, 1))/ combination(12, 4))

# из первого ящика из 3 чёрных вытянуть 1 и из 5 белых вытянуть 1, из второго ящика из 5 белых вытащить 2 и из 7 чёрных вытащить 2
p2 =  ((combination(3, 1) * combination(5, 1))/ combination(8, 2)) * ((combination(5, 2) * combination(7, 2))/ combination(12, 4))

# из первого ящика из 5 белых вытянуть 2 , из второго ящика из 5 белых вытащить 1 и из 7 чёрных вытащить 3
p3 = (combination(5, 2) / combination(8, 2)) * ((combination(5, 1) * combination(7, 3))/ combination(12, 4))

print(f'Вероятность того, что 3 мяча белые: {round((p1 + p2 + p3) * 100, 3)} %')

# 3. На соревновании по биатлону один из трех спортсменов стреляет и попадает в мишень.
# Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8, для третьего — 0.6.
# Найти вероятность того, что выстрел произведен: a). первым спортсменом б). вторым спортсменом в). третьим спортсменом.

Pb1 = Pb2 = Pb3 = 1/3   # Вероятность того что стрелок выстрелил у всех трёх стрелков одинакова.
Pab1 = 0.9              # вероятность того что после выстрела первый стрелок попадёт
Pab2 = 0.8              # вероятность того что после выстрела второй стрелок попадёт
Pab3 = 0.6              # вероятность того что после выстрела третий стрелок попадёт

Pa = Pb1 * Pab1 + Pb2 * Pab2 + Pb3 * Pab3     # полная вероятность

Pb1a = (Pb1 * Pab1) / Pa
Pb2a = (Pb2 * Pab2) / Pa
Pb3a = (Pb3 * Pab3) / Pa

print(f'Вероятность того, что выстрел произведен первым спортсменом: {round((Pb1a) * 100, 3)} %')
print(f'Вероятность того, что выстрел произведен вторым спортсменом: {round((Pb2a) * 100, 3)} %')
print(f'Вероятность того, что выстрел произведен третим спортсменом: {round((Pb3a) * 100, 3)} %')

# 4. В университет на факультеты A и B поступило равное количество студентов, а на факультет C студентов поступило столько же, сколько на A и B вместе.
# Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8.
# Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9.
# Студент сдал первую сессию. Какова вероятность, что он учится: a). на факультете A б). на факультете B в). на факультете C?

# X + X + 2X = 1
# 4X = 1
# X = 0.25

Pb1 = Pb2 = 0.25    # вероятность поступить на факультет А и В
Pb3 = 0.5           # вероятность поступить на факультет С
Pab1 = 0.8          # вероятность того, что студент факультета A сдаст первую сессию
Pab2 = 0.7          # вероятность того, что студент факультета В сдаст первую сессию
Pab3 = 0.9          # вероятность того, что студент факультета С сдаст первую сессию

Pa = Pb1 * Pab1 + Pb2 * Pab2 + Pb3 * Pab3     # полная вероятность сдать первую сессию

Pb1a = (Pb1 * Pab1) / Pa
Pb2a = (Pb2 * Pab2) / Pa
Pb3a = (Pb3 * Pab3) / Pa

print(f'Вероятность того, что студент учиться на факультете А: {round((Pb1a) * 100, 3)} %')
print(f'Вероятность того, что студент учиться на факультете В: {round((Pb2a) * 100, 3)} %')
print(f'Вероятность того, что студент учиться на факультете С: {round((Pb3a) * 100, 3)} %')

# 5. Устройство состоит из трех деталей.
# Для первой детали вероятность выйти из строя в первый месяц равна 0.1, для второй - 0.2, для третьей - 0.25.
# Какова вероятность того, что в первый месяц выйдут из строя: а). все детали б). только две детали в). хотя бы одна деталь г). от одной до двух деталей?
p1 = 0.1
p2 = 0.2
p3 = 0.25

# а). все детали
# должны выйти из строя                                  1 и 2 и 3
print(f'Вероятность выхода из строя всех деталей {round((p1 * p2 * p3) * 100, 3)} %')

# б). только две детали
# могут выйти из строя                                      1 и 2   или 1 и 3  или  2 и 3
print(f'Вероятность выхода из строя 2 деталей {round(( (p1 * p2) + (p1 * p3) + (p2 * p3)) * 100, 3)} %')

# в). хотя бы одна деталь
#  Должны выйти из строя                              1 или 2 или 3
print(f'Вероятность выхода из строя хотя бы 1 детали {round((p1 + p2 + p3) * 100, 3)} %')

# г). от одной до двух деталей
#  Должны выйти из строя                                           (1 или 2 или 3) или  (1 и 2   или 1 и 3  или  2 и 3)
print(f'Вероятность выхода из строя от одной до двух деталей {round(((p1 + p2 + p3) + ((p1 * p2) + (p1 * p3) + (p2 * p3))) * 100, 3)} %')