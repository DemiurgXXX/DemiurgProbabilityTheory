from math import sqrt
import numpy as np

# 1. Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.

X = 80
n = 256
p = 0.95
a = 1 - p
sigma = 16

# X +- Zt a/2  *  (sigma / sqrt(n))

Zt = 1.96   # табличное Z

print(f'Левая граница доверительного интервала: {80 - (1.96 * 16) / sqrt(256)}')
print(f'Правая граница доверительного интервала: {80 + (1.96 * 16) / sqrt(256)}')

# 2. В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
# получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
# значение с доверительной вероятностью 0,95.

p = 0.95
a = 1 - p

list1 = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
li = np.array(list1)

X = round(li.mean(), 3)
print(f'Среднее выброчное X = {round(X, 3)}')

sigma = li.std(ddof = 1)
print(f'Стандартное несмещённое отклонение {round(sigma, 6)}')

# не используя дополнительных библиотек
# среднее выборочное
list_sum = 0

for i in list1:
    list_sum += i

list_mean = list_sum / len(list1)
print(f'Среднее выборочное X = : {round(list_mean, 3)}')

temp_sum = 0

for i in list1:
    temp_sum += (i - X) ** 2

list_nesmesh_len = len(list1) - 1    # для получения несмещённой дисперсии отнимаем от кол-ва элементов списка 1
nesmesh_sigma = temp_sum / list_nesmesh_len

# несмещённое среднее квадратичное отклонение
list_std = sqrt(nesmesh_sigma)
print(f'Стандартное несмещённое отклонение: {round(list_std, 6)}')

t = 2.262   # табличное t a/2

# X +- t a/2  *  (sigma_н / sqrt(n))

print(f'Левая граница доверительного интервала: {round(6.59 - (2.262 * 0.450802) / sqrt(10), 6)}')
print(f'Правая граница доверительного интервала: {round(6.59 + (2.262 * 0.450802) / sqrt(10), 6)}')


# 3. Проведите тест гипотезы. Утверждается, что шарики для подшипников, изготовленные автоматическим станком, имеют средний диаметр 17 мм.
# Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из n=100 шариков средний диаметр
# оказался равным 17.5 мм, а дисперсия известна и равна 4 кв. мм.

mu0 = 17
alpha = 0.05
n = 100
mu1 = 17.5
D = 4

# Формируем нулевую и альтернативную гипотезы
# H0: 17.5 = 17
# H1: 17.5 > 17

# Рассчитываем Z-критерий
Zr = (17.5 - 17) / (sqrt(4) / sqrt(100))
print(f'Z расчётное = {Zr}')

Zt = 1.65

# Zr > Zt
print('Вывод: шарики для подшипников имеют средний диаметр больше 17 мм для уровня значимости 0,05')
#
# 4. Проведите тест гипотезы. Продавец утверждает, что средний вес пачки печенья составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%? (Провести двусторонний тест.)

X = 200
n = 10

# Формируем нулевую и альтернативную гипотезы
# H0: 200 = 200
# H1: 200 != 200

# сигма генеральной совокупности не известна. используем критерий Стьюдента
list2 = [202, 203, 199, 197, 195, 201, 200, 204, 194, 190]
li = np.array(list2)

X = round(li.mean(), 3)
print(f'Среднее выброчное X = {round(X, 3)}')

sigma = li.std(ddof = 1)
print(f'Стандартное несмещённое отклонение {round(sigma, 6)}')

# tn = (X - mu) / (sigma_n / sqrt(n))

tn = (200 - 198.5) / (4.453463 / sqrt(10))
print(f'Наблюдаемое значение критерия Стьюдента: {round(tn, 3)}')

# Табличное значение критерия учитываz, что доверительная вероятность равна 99% и тест двусторонний для сетепени свободы n-1 = 9 равна t a/2 = 3.250

print(f'т.к наблюдаемое значение критерия Сьюдента {round(tn, 3)} меньше табличного 3.250 делаем вывод что нулевая гипотеза верна и утверждение продавца верно')

